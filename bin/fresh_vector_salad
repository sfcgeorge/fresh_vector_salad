#!/usr/bin/env ruby

require "vector_salad/optparse"
require "fresh_vector_salad"
require "optparse"
require "ostruct"
require "tk"
require "tkextlib/tkimg"
require "open3"
require "expect"
require "pty"
#require 'listen'

module FreshVectorSalad
  class Callbacks
    def initialize(options, image, label)
      @options, @image, @label = options, image, label
    end

    def success
      @image.file = "#{@options.naked_file}.png"
      @label.height = @image.height + 10
      @label.width = @image.width + 10
      @label.background = "white"
      @label.pack
    end

    def error
      @label.background = "red"
    end
  end
end

module VectorSalad
  class Optparse
    defaults[:verbose] = false
    defaults[:dpi] = 90

    self.tool_name = "fresh_vector_salad"

    optparse.on_head("-d", "--dpi DPI", "Export DPI (default 90). Use to shrink or expand the preview.") do |dpi|
      options.dpi = dpi
    end

    optparse.on_head("-v", "--[no-]verbose", "Run verbosely") do |v|
      options.verbose = v
    end

    optparse.on_tail("--version", "Show version") do
      puts FreshVectorSalad::VERSION
      exit
    end
  end
end

ARGV << "-h" if ARGV.empty?
options = VectorSalad::Optparse.parse(ARGV)
options.naked_file = options.file[0...-3]

TkRoot.new do
  title "Fresh Vector Salad"
end

image = TkPhotoImage.new

label = TkLabel.new
label.image = image

callbacks = FreshVectorSalad::Callbacks.new(options, image, label)
fvs = FreshVectorSalad::Fresh.new(options, callbacks)

fvs.auto_compile

#Listen.to(options.path, only: [/\.rb$/], force_polling: true) do |modified, added, removed|
  #fvs.auto_compile if modified.any?{ |m| m =~ /\.rb$/ }
#end.start
Thread.new do
  last = File.stat(options.file).mtime
  loop do
    now = File.stat(options.file).mtime
    if now > last
      fvs.auto_compile
      last = now
    end
    sleep 0.2
  end
end

Tk.mainloop
